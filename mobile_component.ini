// SIT210 Final Project

// An embedded system to check for car spaces at the front of your house.
// This is the particle code for the mobile component
#include <LiquidCrystal_I2C_Spark.h>
#include <TinyGPS++.h>
#include <math.h>

// create the gps and lcd objects
TinyGPSPlus gps; 
LiquidCrystal_I2C *lcd;

// Variables
// are we in home zone
bool home = false;
// gps coords
double lat = 0;
double lng = 0;
// distance from home
double dist = 0;
// home lat and long
double homeGPS[] = {your lattitude, your longitude};
// how big the radius is for when we should start checking for car spaces
double homeRadius = 1.5; // in km
// if there is a car space out the front
bool carSpaceAvailable = false;
// if there is traffic blocking the car space
bool traffic = false;
// messages for the user
String messageLine1 = "Acquiring satelites";
String messageLine2 = "";
String title = "Car Space Checker";
String lastMessage = "";

// setup the program
void setup()
{
    // start the serial port for the gps
    Serial1.begin(9600);
    while(!Serial1) { }
    
    // declare the particle variables and functions
    Particle.variable("home", home);
    Particle.variable("lat", lat);
    Particle.variable("lng", lng);
    Particle.variable("dist", dist);
    Particle.function("parkingStatus", parkingStatus);
    // in testing we found the boron would become unresponsive after ~30 seconds. 
    // so we set a ping to fire every 30 seconds to make sure it stays on the network. Research into 
    // this was interesting, it gets into how US, UK, and AUS mobile networks work. Bottom line, this 
    // uses 122 bytes every cycle. But in Australia made the boron able to be contacted after setup.
    Particle.keepAlive(30);
    
    // initialise the display
    lcd = new LiquidCrystal_I2C(0x27, 20, 4);
    lcd->init();
    lcd->backlight();
    lcd->clear();
    updateLCD();
}

// main function loop
void loop()
{
    // if the gps unit is available
    while (Serial1.available()){
        // if we can read data from the gps unit
        if(gps.encode(Serial1.read())) {
            // allocate the lat and long
            lat = gps.location.lat();
            lng = gps.location.lng();
            // gps defaults lat and long to 0 while it is acquiring satellites
            if (lat >= 0 && lng <= 0) {
                messageLine1 = "Acquiring satelites";
                messageLine2 = "";
            } else {
                // the car's location
                double carLoc[] = {lat, lng};
                // the distance the car is from home
                dist = getDistance(homeGPS, carLoc);
                // if we're within the radius we set so we should start checking for car spaces
                if (dist < homeRadius) {
                    // update the particle variable
                    home = true;
                    // switch on the response from the home component and update the message for the user
                    if (!carSpaceAvailable) {
                        messageLine1 = "No car spaces";
                        messageLine2 = "";
                    } else if (carSpaceAvailable && !traffic) {
                        messageLine1 = "Car spot available "; // space is not a typo, used to differentiate strings
                        messageLine2 = "No traffic";
                    } else if (carSpaceAvailable && traffic) {
                        messageLine1 = "Car spot available";
                        messageLine2 = "Traffic";
                    }
                } else {
                    messageLine1 = "Out of zone";
                    messageLine2 = "";
                    home = false;
                }
                // update the display
                updateLCD();
            }
        }
    }
    
    // this code taken from the GPS library. If it's been 5 seconds and the GPS unit has sent less than
    // 10 characters, then it is either not plugged in or is faulty
    if (millis() > 5000 && gps.charsProcessed() < 10) {
        messageLine1 = "GPS error";
        updateLCD();
        delay(1000);
    }
}

// update the display for the user
void updateLCD() {
    // only update if there is a change
    // this stops flickering
    if (lastMessage != messageLine1) {
        lcd->clear();
        lcd->setCursor(1, 0);
        lcd->print(title);
        lcd->setCursor(0, 1);
        lcd->print("Status:");
        lcd->setCursor(0, 2);
        lcd->print(messageLine1);
        lcd->setCursor(0, 3);
        lcd->print(messageLine2);
        lastMessage = messageLine1;
    }
}

// returns the distance between to gps positions
double getDistance(double homeLoc[], double carLoc[]) {
    double carLat = carLoc[0];
    double carLng = carLoc[1];
    // get the earths radius in km
    double earthRadius = 6371.00;
    // we need to use radians but the gps gives us degrees
    // get some offset distances
    double offsetRadiansLat = convertDegreesToRadians(homeLoc[0] - carLat);
    double offsetRadiansLng = convertDegreesToRadians(homeLoc[1] - carLng);
    // convert some degrees to radians
    double homeRadiansLat = convertDegreesToRadians(homeLoc[0]);
    double carRadiansLat = convertDegreesToRadians(carLat);
    
    // math! this is fairly widely publicised as how to get the distance between two gps coords
    // I got it from here: https://www.movable-type.co.uk/scripts/latlong.html
    //double alpha = sin(offsetRadiansLat / 2) * sin(offsetRadiansLat / 2) + sin(offsetRadiansLng / 2) * sin(offsetRadiansLng / 2) * cos(homeRadiansLat) * cos(carRadiansLat);
    double alpha = sin(offsetRadiansLat / 2) * sin(offsetRadiansLat / 2) + cos(carRadiansLat) * cos(homeRadiansLat) * sin(offsetRadiansLng / 2) * sin(offsetRadiansLng / 2);
    double multiplier = 2 * atan2(sqrt(alpha), sqrt(1 - alpha));
    
    // returns the distance in km
    return earthRadius * multiplier;
}

// convert degrees to radians
double convertDegreesToRadians(double degrees) {
    return degrees * M_PI / 180;
}

// particle function updated by the home unit with the parking status
// particle functions must take a string and return an int
int parkingStatus(String status) {
    if (status.toUpperCase() == "NO_PARK") {
        carSpaceAvailable = false;
    } else if (status.toUpperCase() == "TRAFFIC") {
        carSpaceAvailable = true;
        traffic = true;
    } else if (status.toUpperCase() == "NOTHING") {
        carSpaceAvailable = true;
        traffic = false;
    }
    
    // particle functions must return an int
    return 1;
}

